Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

 A height balanced BST : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 
Example :


Given A : 1 -> 2 -> 3
A height balanced BST  :

      2
    /   \
   1     3

*/
TreeNode* make_bst(ListNode* &A,int start,int end){
    if(start>end) return NULL;
    int mid=start+(end-start)/2;
    TreeNode* lft=make_bst(A,start,mid-1);
    TreeNode *root=new TreeNode(A->val);
    A=A->next;
    TreeNode* rght=make_bst(A,mid+1,end);
    root->left=lft;
    root->right=rght;
    return root;
}
 
TreeNode* Solution::sortedListToBST(ListNode* A) {
    if(A==NULL) return NULL;
    ListNode* temp=A;
    int cnt=0;
    while(temp!=NULL){
        cnt++;
        temp=temp->next;
    }
    return make_bst(A,0,cnt-1);
}
